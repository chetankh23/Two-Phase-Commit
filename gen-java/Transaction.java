/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-09")
public class Transaction implements org.apache.thrift.TBase<Transaction, Transaction._Fields>, java.io.Serializable, Cloneable, Comparable<Transaction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Transaction");

  private static final org.apache.thrift.protocol.TField TRAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tran_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("operation_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("client_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("file_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField R_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("rFile", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField TRAN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("tran_status", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransactionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransactionTupleSchemeFactory());
  }

  public long tran_id; // required
  public String operation_name; // required
  public String client_id; // required
  public String file_name; // required
  public RFile rFile; // required
  public T_Status tran_status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRAN_ID((short)1, "tran_id"),
    OPERATION_NAME((short)2, "operation_name"),
    CLIENT_ID((short)3, "client_id"),
    FILE_NAME((short)4, "file_name"),
    R_FILE((short)5, "rFile"),
    TRAN_STATUS((short)6, "tran_status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRAN_ID
          return TRAN_ID;
        case 2: // OPERATION_NAME
          return OPERATION_NAME;
        case 3: // CLIENT_ID
          return CLIENT_ID;
        case 4: // FILE_NAME
          return FILE_NAME;
        case 5: // R_FILE
          return R_FILE;
        case 6: // TRAN_STATUS
          return TRAN_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRAN_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRAN_ID, new org.apache.thrift.meta_data.FieldMetaData("tran_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPERATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("operation_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("client_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("file_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.R_FILE, new org.apache.thrift.meta_data.FieldMetaData("rFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "RFile")));
    tmpMap.put(_Fields.TRAN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("tran_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "T_Status")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Transaction.class, metaDataMap);
  }

  public Transaction() {
  }

  public Transaction(
    long tran_id,
    String operation_name,
    String client_id,
    String file_name,
    RFile rFile,
    T_Status tran_status)
  {
    this();
    this.tran_id = tran_id;
    setTran_idIsSet(true);
    this.operation_name = operation_name;
    this.client_id = client_id;
    this.file_name = file_name;
    this.rFile = rFile;
    this.tran_status = tran_status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Transaction(Transaction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tran_id = other.tran_id;
    if (other.isSetOperation_name()) {
      this.operation_name = other.operation_name;
    }
    if (other.isSetClient_id()) {
      this.client_id = other.client_id;
    }
    if (other.isSetFile_name()) {
      this.file_name = other.file_name;
    }
    if (other.isSetRFile()) {
      this.rFile = other.rFile;
    }
    if (other.isSetTran_status()) {
      this.tran_status = other.tran_status;
    }
  }

  public Transaction deepCopy() {
    return new Transaction(this);
  }

  @Override
  public void clear() {
    setTran_idIsSet(false);
    this.tran_id = 0;
    this.operation_name = null;
    this.client_id = null;
    this.file_name = null;
    this.rFile = null;
    this.tran_status = null;
  }

  public long getTran_id() {
    return this.tran_id;
  }

  public Transaction setTran_id(long tran_id) {
    this.tran_id = tran_id;
    setTran_idIsSet(true);
    return this;
  }

  public void unsetTran_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRAN_ID_ISSET_ID);
  }

  /** Returns true if field tran_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTran_id() {
    return EncodingUtils.testBit(__isset_bitfield, __TRAN_ID_ISSET_ID);
  }

  public void setTran_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRAN_ID_ISSET_ID, value);
  }

  public String getOperation_name() {
    return this.operation_name;
  }

  public Transaction setOperation_name(String operation_name) {
    this.operation_name = operation_name;
    return this;
  }

  public void unsetOperation_name() {
    this.operation_name = null;
  }

  /** Returns true if field operation_name is set (has been assigned a value) and false otherwise */
  public boolean isSetOperation_name() {
    return this.operation_name != null;
  }

  public void setOperation_nameIsSet(boolean value) {
    if (!value) {
      this.operation_name = null;
    }
  }

  public String getClient_id() {
    return this.client_id;
  }

  public Transaction setClient_id(String client_id) {
    this.client_id = client_id;
    return this;
  }

  public void unsetClient_id() {
    this.client_id = null;
  }

  /** Returns true if field client_id is set (has been assigned a value) and false otherwise */
  public boolean isSetClient_id() {
    return this.client_id != null;
  }

  public void setClient_idIsSet(boolean value) {
    if (!value) {
      this.client_id = null;
    }
  }

  public String getFile_name() {
    return this.file_name;
  }

  public Transaction setFile_name(String file_name) {
    this.file_name = file_name;
    return this;
  }

  public void unsetFile_name() {
    this.file_name = null;
  }

  /** Returns true if field file_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_name() {
    return this.file_name != null;
  }

  public void setFile_nameIsSet(boolean value) {
    if (!value) {
      this.file_name = null;
    }
  }

  public RFile getRFile() {
    return this.rFile;
  }

  public Transaction setRFile(RFile rFile) {
    this.rFile = rFile;
    return this;
  }

  public void unsetRFile() {
    this.rFile = null;
  }

  /** Returns true if field rFile is set (has been assigned a value) and false otherwise */
  public boolean isSetRFile() {
    return this.rFile != null;
  }

  public void setRFileIsSet(boolean value) {
    if (!value) {
      this.rFile = null;
    }
  }

  public T_Status getTran_status() {
    return this.tran_status;
  }

  public Transaction setTran_status(T_Status tran_status) {
    this.tran_status = tran_status;
    return this;
  }

  public void unsetTran_status() {
    this.tran_status = null;
  }

  /** Returns true if field tran_status is set (has been assigned a value) and false otherwise */
  public boolean isSetTran_status() {
    return this.tran_status != null;
  }

  public void setTran_statusIsSet(boolean value) {
    if (!value) {
      this.tran_status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRAN_ID:
      if (value == null) {
        unsetTran_id();
      } else {
        setTran_id((Long)value);
      }
      break;

    case OPERATION_NAME:
      if (value == null) {
        unsetOperation_name();
      } else {
        setOperation_name((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClient_id();
      } else {
        setClient_id((String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFile_name();
      } else {
        setFile_name((String)value);
      }
      break;

    case R_FILE:
      if (value == null) {
        unsetRFile();
      } else {
        setRFile((RFile)value);
      }
      break;

    case TRAN_STATUS:
      if (value == null) {
        unsetTran_status();
      } else {
        setTran_status((T_Status)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRAN_ID:
      return getTran_id();

    case OPERATION_NAME:
      return getOperation_name();

    case CLIENT_ID:
      return getClient_id();

    case FILE_NAME:
      return getFile_name();

    case R_FILE:
      return getRFile();

    case TRAN_STATUS:
      return getTran_status();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRAN_ID:
      return isSetTran_id();
    case OPERATION_NAME:
      return isSetOperation_name();
    case CLIENT_ID:
      return isSetClient_id();
    case FILE_NAME:
      return isSetFile_name();
    case R_FILE:
      return isSetRFile();
    case TRAN_STATUS:
      return isSetTran_status();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Transaction)
      return this.equals((Transaction)that);
    return false;
  }

  public boolean equals(Transaction that) {
    if (that == null)
      return false;

    boolean this_present_tran_id = true;
    boolean that_present_tran_id = true;
    if (this_present_tran_id || that_present_tran_id) {
      if (!(this_present_tran_id && that_present_tran_id))
        return false;
      if (this.tran_id != that.tran_id)
        return false;
    }

    boolean this_present_operation_name = true && this.isSetOperation_name();
    boolean that_present_operation_name = true && that.isSetOperation_name();
    if (this_present_operation_name || that_present_operation_name) {
      if (!(this_present_operation_name && that_present_operation_name))
        return false;
      if (!this.operation_name.equals(that.operation_name))
        return false;
    }

    boolean this_present_client_id = true && this.isSetClient_id();
    boolean that_present_client_id = true && that.isSetClient_id();
    if (this_present_client_id || that_present_client_id) {
      if (!(this_present_client_id && that_present_client_id))
        return false;
      if (!this.client_id.equals(that.client_id))
        return false;
    }

    boolean this_present_file_name = true && this.isSetFile_name();
    boolean that_present_file_name = true && that.isSetFile_name();
    if (this_present_file_name || that_present_file_name) {
      if (!(this_present_file_name && that_present_file_name))
        return false;
      if (!this.file_name.equals(that.file_name))
        return false;
    }

    boolean this_present_rFile = true && this.isSetRFile();
    boolean that_present_rFile = true && that.isSetRFile();
    if (this_present_rFile || that_present_rFile) {
      if (!(this_present_rFile && that_present_rFile))
        return false;
      if (!this.rFile.equals(that.rFile))
        return false;
    }

    boolean this_present_tran_status = true && this.isSetTran_status();
    boolean that_present_tran_status = true && that.isSetTran_status();
    if (this_present_tran_status || that_present_tran_status) {
      if (!(this_present_tran_status && that_present_tran_status))
        return false;
      if (!this.tran_status.equals(that.tran_status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tran_id = true;
    list.add(present_tran_id);
    if (present_tran_id)
      list.add(tran_id);

    boolean present_operation_name = true && (isSetOperation_name());
    list.add(present_operation_name);
    if (present_operation_name)
      list.add(operation_name);

    boolean present_client_id = true && (isSetClient_id());
    list.add(present_client_id);
    if (present_client_id)
      list.add(client_id);

    boolean present_file_name = true && (isSetFile_name());
    list.add(present_file_name);
    if (present_file_name)
      list.add(file_name);

    boolean present_rFile = true && (isSetRFile());
    list.add(present_rFile);
    if (present_rFile)
      list.add(rFile);

    boolean present_tran_status = true && (isSetTran_status());
    list.add(present_tran_status);
    if (present_tran_status)
      list.add(tran_status.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(Transaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTran_id()).compareTo(other.isSetTran_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTran_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tran_id, other.tran_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperation_name()).compareTo(other.isSetOperation_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperation_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation_name, other.operation_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClient_id()).compareTo(other.isSetClient_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_id, other.client_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_name()).compareTo(other.isSetFile_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_name, other.file_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRFile()).compareTo(other.isSetRFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rFile, other.rFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTran_status()).compareTo(other.isSetTran_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTran_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tran_status, other.tran_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Transaction(");
    boolean first = true;

    sb.append("tran_id:");
    sb.append(this.tran_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operation_name:");
    if (this.operation_name == null) {
      sb.append("null");
    } else {
      sb.append(this.operation_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("client_id:");
    if (this.client_id == null) {
      sb.append("null");
    } else {
      sb.append(this.client_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_name:");
    if (this.file_name == null) {
      sb.append("null");
    } else {
      sb.append(this.file_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rFile:");
    if (this.rFile == null) {
      sb.append("null");
    } else {
      sb.append(this.rFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tran_status:");
    if (this.tran_status == null) {
      sb.append("null");
    } else {
      sb.append(this.tran_status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransactionStandardSchemeFactory implements SchemeFactory {
    public TransactionStandardScheme getScheme() {
      return new TransactionStandardScheme();
    }
  }

  private static class TransactionStandardScheme extends StandardScheme<Transaction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Transaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tran_id = iprot.readI64();
              struct.setTran_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operation_name = iprot.readString();
              struct.setOperation_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.client_id = iprot.readString();
              struct.setClient_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_name = iprot.readString();
              struct.setFile_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // R_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rFile = new RFile();
              struct.rFile.read(iprot);
              struct.setRFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRAN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tran_status = T_Status.findByValue(iprot.readI32());
              struct.setTran_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Transaction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TRAN_ID_FIELD_DESC);
      oprot.writeI64(struct.tran_id);
      oprot.writeFieldEnd();
      if (struct.operation_name != null) {
        oprot.writeFieldBegin(OPERATION_NAME_FIELD_DESC);
        oprot.writeString(struct.operation_name);
        oprot.writeFieldEnd();
      }
      if (struct.client_id != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.client_id);
        oprot.writeFieldEnd();
      }
      if (struct.file_name != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.file_name);
        oprot.writeFieldEnd();
      }
      if (struct.rFile != null) {
        oprot.writeFieldBegin(R_FILE_FIELD_DESC);
        struct.rFile.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tran_status != null) {
        oprot.writeFieldBegin(TRAN_STATUS_FIELD_DESC);
        oprot.writeI32(struct.tran_status.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransactionTupleSchemeFactory implements SchemeFactory {
    public TransactionTupleScheme getScheme() {
      return new TransactionTupleScheme();
    }
  }

  private static class TransactionTupleScheme extends TupleScheme<Transaction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Transaction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTran_id()) {
        optionals.set(0);
      }
      if (struct.isSetOperation_name()) {
        optionals.set(1);
      }
      if (struct.isSetClient_id()) {
        optionals.set(2);
      }
      if (struct.isSetFile_name()) {
        optionals.set(3);
      }
      if (struct.isSetRFile()) {
        optionals.set(4);
      }
      if (struct.isSetTran_status()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTran_id()) {
        oprot.writeI64(struct.tran_id);
      }
      if (struct.isSetOperation_name()) {
        oprot.writeString(struct.operation_name);
      }
      if (struct.isSetClient_id()) {
        oprot.writeString(struct.client_id);
      }
      if (struct.isSetFile_name()) {
        oprot.writeString(struct.file_name);
      }
      if (struct.isSetRFile()) {
        struct.rFile.write(oprot);
      }
      if (struct.isSetTran_status()) {
        oprot.writeI32(struct.tran_status.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Transaction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.tran_id = iprot.readI64();
        struct.setTran_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.operation_name = iprot.readString();
        struct.setOperation_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.client_id = iprot.readString();
        struct.setClient_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.file_name = iprot.readString();
        struct.setFile_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rFile = new RFile();
        struct.rFile.read(iprot);
        struct.setRFileIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tran_status = T_Status.findByValue(iprot.readI32());
        struct.setTran_statusIsSet(true);
      }
    }
  }

}

